// This file is loaded in using the Newtonsoft JSON Parser.
// It supports the following:
//
//   * Line comments (e.g., // Comment)
//   * Block comments (e.g., /* Comment */)
//   * quoteless properties (e.g., {foo: "bar"})
//   * Trailing commas (e.g., {"foo": "bar",})
//   * Multiline strings (e.g., {"foo": "bar
//                                       baz"})
{
    definitions: {
        vscode: {
			// How early in the list of options this action should appear. Lower is earlier/higher priority.
            priority: -100,  // Have VSCode show up early in the actions list.
            
            // For bashCommand and batchCommand, you can use the same variable substitution syntax
            // that exists for global parameters. The following objects are available:
            //
            //  * request:
            //      url: string  // The URL being exercised
            //      file: string  // The absolute path to the file specified in the URL
            //      relativePath: string  // The path of the file specified in the URL, relative to the repo root.
            //      startLine: int | null  // The first line number linked to, if any is specified.
            //                             // You can check if it is specified with
            //                             //   (=request[?(@.startLine != null)]=)
            //                             // And get the value if so with:
            //                             //   (=request[?(@.startLine != null)].startLine=)
            //      endLine: int | null  // The last line number linked to. See startLine.
            //      repoConfig: RepoConfig  // The RepoConfig object that corresponds to the request
            //                              // This includes things like the root, remoteUrl, etc.
            //                              // See https://github.com/mderu/LinkWheel/blob/master/CoreAPI/Config/RepoConfig.cs
            //  * action: any  // The contents of the `action` JSON object with the type that matches
            //                 // the name of this object (in this case "vscode").
            //  * name: string  // The name of the action, as specified in the `actions` object. See below
            //  * definition: this  // This object. Format strings do not recurse.
            //
            // Note that if you can use relative paths to call a bash/batch script that resides in
            // your workspace to simplify the work being done here (i.e., you can avoid having to
            // escape all of your quotes, and pass format strings in through arguments instead).
            bashCommand: "code \"(=action.workspacePath=)\" &
                          sleep .2
                          code (=request.file=)",
            // Only batchCommand or bashCommand are required. If the operating system doesn't support
            // that language, the command is omitted from the list of actions.
            batchCommand: "start /B code \"(=action.workspacePath=)\"
                           powershell sleep .2
                           IF [(=request.startLine=)] == [] GOTO NoLineNum
                           code \"(=request.file=)\"
                           exit
                           :NoLineNum
                           code \"(=request.file=)\":(=request.startLine=)
            ",
            
            // A brief name of what is opened when this action is selected.
            title: "VS Code",
            
            // A longer description of what action is taken.
            description: "Opens (=request.relativePath=) in VS Code",
            
            // A new-line delimited list of fnmatch strings that accept files. At least one
            // line must accept the file for the action to show up.
            // Note that leading whitespace is trimmed, and the path is always relative to the repo root,
			// even if defined within the global config.
            //
            // If fnmatch is unspecified, all files will automatically match.
            fnmatch: "(=action.fnmatch=)",  // Defer the fnmatch strings to what is configured the action
            
            // A string containing any of the following:
            //  * A path to an image
            //  * A path to an executable or dll, with an optional comma followed by a number denoting which icon to use.
            //  * An https:// or http:// URI.
            // Otherwise, the icon will be null, and a default missing icon will be shown in LinkWheel.
            iconSource: "%LocalAppData%/Programs/Microsoft VS Code/resources/app/resources/win32/code_150x150.png",
			// Same as above, except this is the smaller icon in the bottom right.
            iconSourceSecondary: "(=request.file=)",
        },
        visualStudio: {
            priority: -100,
            batchCommand: "
                IF [(=request.startLine=)] == [] GOTO NoLineNum
                %CD%/.ideld/open_vs.vbs (=request.file=) (=request.startLine=) 0
                exit
                :NoLineNum
                %CD%/.ideld/open_vs.vbs (=request.file=) 0 0
            ",
            title: "Visual Studio",
            description: "Opens (=request.relativePath=) in Visual Studio",
            fnmatch: "(=action.fnmatch=)",  // Defer the fnmatch strings to the idelconfig file.
            iconSource: "devenv.exe",
            iconSourceSecondary: "(=request.file=)",
        },
        openInDefaultEditor: {
            priority: -90,
            batchCommand: "(=request.file=)",
            title: "Open File",
            description: "Behaves as if you double clicked (=request.relativePath=) in the File Explorer",
            fnmatch: "**",  // Always match everything.
            iconSource: "(=request.file=)"
        },
        showInExplorer: {
            priority: 0,
            batchCommand: "C:/Windows/explorer.exe /select,\"(=request.normalizedFile=)\"",
            title: "Show In Explorer",
            description: "Reveals (=request.relativePath=) in the file explorer",
            fnmatch: "**",  // Always match everything.
            iconSource: "C:/Windows/explorer.exe"
        },
    },
    actions: {
        // A name to associate with this action, so user-defined actions can override.
        // This name should be specific to the repo.
        openInVisualStudio: {
            // Required: The name of the definition to model the action after.
            definition: "visualStudio",
            
            // Everything else is the wild west: can be anything and everything. Data here
            // can be used in the definition.
            fnmatch: "
                **/*.cs
                **/*.csproj
                **/*.sln
            ",
            workspacePath: "./Extensions/VSCode/codelink/vscode-ext.code-workspace",
        },
        openInDefaultEditor: {
            definition: "openInDefaultEditor",
        },
        showInExplorer: {
            definition: "showInExplorer",
        },
    },
}
